interop-api-gateway {
  port = 8088

  services {
    agreement-process = ${AGREEMENT_PROCESS_URL}
    authorization-process = ${AUTHORIZATION_PROCESS_URL}
    catalog-process = ${CATALOG_PROCESS_URL}
    party-registry-proxy = ${PARTY_REGISTRY_PROXY_URL}
    attribute-registry-process = ${ATTRIBUTE_REGISTRY_PROCESS_URL}
    purpose-process = ${PURPOSE_PROCESS_URL}
    tenant-process = ${TENANT_PROCESS_URL}
    notifier = ${NOTIFIER_URL}
  }
  jwt {
    audience = ${ACCEPTED_AUDIENCES}
  }

  rate-limiter {
    limiter-group = "API_GW"
    max-requests = ${RATE_LIMITER_MAX_REQUESTS}
    burst-percentage = ${RATE_LIMITER_BURST_PERCENTAGE}
    rate-interval = ${RATE_LIMITER_RATE_INTERVAL}
    redis-host = ${RATE_LIMITER_REDIS_HOST}
    redis-port = ${RATE_LIMITER_REDIS_PORT}
    timeout = ${RATE_LIMITER_TIMEOUT}
  }

  read-model {
    db {
      name = ${READ_MODEL_DB_NAME}
      connection-string = "mongodb://"${READ_MODEL_DB_USER}":"${READ_MODEL_DB_PASSWORD}"@"${READ_MODEL_DB_HOST}":"${READ_MODEL_DB_PORT}"/"${READ_MODEL_DB_NAME}"?replicaSet=rs0&readPreference=secondaryPreferred"
    }
  }
}

akka {
  stdout-loglevel = "OFF"
  loglevel = "DEBUG"
  use-slf4j = on
  management {
    http {
      hostname = "0.0.0.0"
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }
    health-checks {
      readiness-checks {
        ready = "it.pagopa.interop.apigateway.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.interop.apigateway.server.impl.LiveCheck"
      }
    }
  }
}

interop-commons {
  isInternetFacing = true

  jwt {
    public-keys {
      urls = ${WELL_KNOWN_URLS}
    }
  }
}

akka.http {
  server {
    pipelining-limit = 128 # default 1
    pipelining-limit = ${?PIPELINING_LIMIT}
    backlog = 100 # default 100
    backlog = ${?BACKLOG_SIZE}
  }

  host-connection-pool {
    max-connections = 16
    max-connections = ${?CONNECTION_POOL_MAX_CONNECTIONS}
    min-connections = 2
    min-connections = ${?CONNECTION_POOL_MIN_CONNECTIONS}
    max-open-requests = 256
    max-open-requests = ${?CONNECTION_POOL_MAX_OPEN_REQUESTS}
  }
}

futures-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    core-pool-size-min = 4
    core-pool-size-factor = 1.0
    core-pool-size-max = 16
    max-pool-size-min = 4
    max-pool-size-factor = 1.0
    max-pool-size-max = 16
  }
  throughput = 1
  throughput = ${?BLOCKING_DISPATCHER_THROUGHPUT}
} 
